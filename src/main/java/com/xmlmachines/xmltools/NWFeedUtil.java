package com.xmlmachines.xmltools;import java.io.IOException;import java.net.URI;import java.net.URISyntaxException;import nu.xom.Builder;import nu.xom.Document;import nu.xom.Element;import nu.xom.Node;import nu.xom.Nodes;import nu.xom.ParsingException;import nu.xom.ValidityException;import nux.xom.xquery.XQueryUtil;import org.apache.commons.logging.Log;import org.apache.commons.logging.LogFactory;import com.marklogic.xcc.ContentSource;import com.marklogic.xcc.ContentSourceFactory;import com.marklogic.xcc.Request;import com.marklogic.xcc.Session;import com.marklogic.xcc.exceptions.RequestException;import com.marklogic.xcc.exceptions.XccConfigException;import com.sun.jersey.api.client.Client;import com.sun.jersey.api.client.UniformInterfaceException;import com.sun.jersey.api.client.WebResource;/** * Demo class for ingesting an RSS feed, grabbing each article id to resolve the * document URL, getting the document using jersey client and storing it in * MarkLogic *  * @author ableasdale *  */public class NWFeedUtil {	public static void main(String[] args) {		Log LOG = LogFactory.getLog(NWFeedUtil.class);		URI mluri = null;		ContentSource contentSource = null;		try {			mluri = new URI("xcc://admin:admin@localhost:8003/nyt3");		} catch (URISyntaxException e2) {			// TODO Auto-generated catch block			e2.printStackTrace();		}		try {			contentSource = ContentSourceFactory.newContentSource(mluri);		} catch (XccConfigException e1) {			// TODO Auto-generated catch block			e1.printStackTrace();		}		Builder b = new Builder();		try {			Document doc = b					.build("http://feeds.newsweek.com/newsweek/TopNews");			Nodes nodes = XQueryUtil					.xquery(doc,							"declare namespace atom = \"http://www.w3.org/2005/Atom\"; /atom:feed/atom:entry/atom:id");			for (int i = 0; i < nodes.size(); i++) {				StringBuilder uri = new StringBuilder();				uri.append("http://www.newsweek.com")						.append(nodes.get(i).getValue().substring(17))						.append(".xml");				LOG.info("[URI]: " + uri.toString());				/**				 * Get the page				 */				Client client = Client.create();				WebResource webResource = client.resource(uri.toString());				String s = webResource.accept("application/xml").get(						String.class);				String temp = "xdmp:document-insert(\"" + uri.toString()						+ "\", " + "<doc uri=\"" + uri.toString() + "\">"						+ s.substring(38) + "</doc>" + ")";				Session session = contentSource.newSession();				Request request = session.newAdhocQuery(temp);				session.submitRequest(request);				session.close();			}			System.out.println(nodes.size() + " nodes returned");		} catch (ValidityException e) {			// TODO Auto-generated catch block			e.printStackTrace();		} catch (UniformInterfaceException e) {			// TODO Auto-generated catch block			e.printStackTrace();		} catch (ParsingException e) {			// TODO Auto-generated catch block			e.printStackTrace();		} catch (IOException e) {			// TODO Auto-generated catch block			e.printStackTrace();		} catch (RequestException e) {			// TODO Auto-generated catch block			e.printStackTrace();		}	}	/**	 * Not used - but another way to manually traverse a doc using XOM	 * 	 * @param element	 */	public static void traverseDocument(Element element) {		// Now loop through child nodes		for (int i = 0; i < element.getChildCount(); i++) {			Node node = element.getChild(i);			if (node instanceof Element					&& ((Element) node).getLocalName().equals("entry")) {				for (int j = 0; j < node.getChildCount(); j++) {					Node node2 = node.getChild(j);					if (node2 instanceof Element							&& ((Element) node2).getLocalName().equals("id")) {						// System.out.println("[E]: " + node2.toString());						System.out.println(node2.getValue());					}				}			}		}	}}